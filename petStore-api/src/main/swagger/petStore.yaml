swagger: '2.0'
info:
  version: '1.0.0'
  title: Swagger Petstore (Simple)
  description: A sample API that uses a petstore as an example to demonstrate features in the swagger-2.0 specification
  termsOfService: http://helloreverb.com/terms/
  contact:
    name: Swagger API team
    email: foo@example.com
    url: http://swagger.io
  license:
    name: MIT
    url: http://opensource.org/licenses/MIT
host: petstore.swagger.wordnik.com
basePath: /api
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  session:
    type: apiKey
    name: Authorization
    in: header
  jwt:
    type: apiKey
    name: Authorization
    in: header
paths:
  /pets:
    get:
      description: Returns all pets from the system that the user has access to
      operationId: findPets
      produces:
        - application/json
        - application/xml
        - text/xml
        - text/html
      parameters:
        - name: tags
          in: query
          description: tags to filter by
          required: false
          type: array
          items:
#            $ref: '#/definitions/PetTag'
            type: string
            enum:
              - young
              - mature
          collectionFormat: csv
        - name: pager.drop
          in: query
          description: number of results to skip from the beginning
          required: false
          type: integer
          format: int32
          default: -1
        - name: pager.limit
          in: query
          description: maximum number of results to return
          required: false
          type: integer
          format: int32
      responses:
        '200':
          description: pet response
          schema:
            type: array
            items:
              $ref: '#/definitions/Pet'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'
      security:
      - jwt:
    post:
      description: Creates a new pet in the store.  Duplicates are allowed
      operationId: addPet
      produces:
        - application/json
      parameters:
        - name: pet
          in: body
          description: Pet to add to the store
          required: true
          schema:
            $ref: '#/definitions/NewPet'
      responses:
        '200':
          description: pet response
          schema:
            $ref: '#/definitions/Pet'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'
      security:
      - jwt:
        - "roles:admin,api"
        - "capability:some"
  /pets/{id}:
    get:
      description: Returns a user based on a single ID, if the user does not have access to the pet
      operationId: findPetById
      produces:
        - application/json
        - application/xml
        - text/xml
        - text/html
      parameters:
        - name: id
          in: path
          description: ID of pet to fetch
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: pet response
          schema:
            $ref: '#/definitions/Pet'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'
      security:
        - jwt:
    delete:
      description: deletes a single pet based on the ID supplied
      operationId: deletePet
      parameters:
        - name: id
          in: path
          description: ID of pet to delete
          required: true
          type: integer
          format: int64
      responses:
        '204':
          description: pet deleted
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'
      security:
        - jwt:
          - "roles:admin,api"
  /pets/{tag}:
    get:
      description: Returns a user based on a single tag, if the user does not have access to the pet
      operationId: findPetByTag
      produces:
        - application/json
        - application/xml
        - text/xml
        - text/html
      parameters:
        - name: tag
          in: path
          description: Tag of pet to fetch
          required: true
          type: string
          enum:
            - young
            - mature
      responses:
        '200':
          description: pet response
          schema:
            $ref: '#/definitions/Pet'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'
      security:
        - jwt:
definitions:
  PetTag:
    type: string
    enum: &PETTAG
      - young
      - mature
  Pet:
    required:
      - id
      - name
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      tag:
        type: array
        items:
          $ref: '#/definitions/PetTag'
  NewPet:
    required:
      - name
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      tag:
        type: array
        items:
          $ref: '#/definitions/PetTag'
  LogLevel:
    type: string
    enum: &LOGLEVEL
      - trace
      - debug
      - info
      - warning
      - fatal
  ErrorModel:
    required:
      - code
      - uuid
      - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      level:
        type: string
        enum: *LOGLEVEL
      uuid:
        type: string
        format: uuid